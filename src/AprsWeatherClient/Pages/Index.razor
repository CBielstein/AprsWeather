@page "/"
@using AprsSharp.Parsers.Aprs
@using AprsWeather.Shared
@using Microsoft.Extensions.Configuration
@using AprsWeatherClient.Extensions
@using System.Collections.Generic
@using Darnton.Blazor.DeviceInterop.Geolocation
@inject IConfiguration Configuration
@inject IGeolocationService locationService

<PageTitle>APRS Weather</PageTitle>

<h1>Current Weather</h1>

<div>
    <a>Gridsquare: </a>
    <input id="userGridsquareBox" placeholder="CN87to" @bind="userGridsquare"/>
    <button @onclick="AutoLocation">Find My Location</button>
    <button @onclick="ManualLocation">Get Weather!</button>
    <br/>
    <a>@userMessage</a>
</div>

@if (userGridsquare == null)
{
    <p><em>Input location...</em></p>
}
else if (report == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Measurement</th>
                <th>Reading</th>
            </tr>
        </thead>
        <tbody>
            @if (report.Packet.InfoField is WeatherInfo wi)
            {
                @foreach ((string label, WeatherInfoHelpers.MeasurementDisplayMap displayMap) in WeatherInfoHelpers.PropertyLabels)
                {
                    string? measurement = displayMap(wi);
                    if (measurement != null)
                    {
                        <tr>
                            <td>@label</td>
                            <td>@measurement</td>
                        </tr>
                    }
                }

                <div>
                    <i>
                        Reported <b>@report.ReceivedTime.MinutesSince() minutes ago</b> from about <b>@($"{userPosition.MilesTo(wi.Position)} miles {userPosition.DirectionTo(wi.Position)}") away</b> by <b>@report.Packet.Sender</b>.
                    </i>
                </div>
            }
        </tbody>
    </table>
}

@code {
    private WeatherReport? report;
    private HttpClient client = new HttpClient();
    private string? apiAddress;
    private string? userGridsquare;
    private Position? userPosition;
    private string userMessage = string.Empty;

    private async Task UpdateReports()
    {
        if (string.IsNullOrWhiteSpace(userGridsquare))
        {
            return;
        }

        if (apiAddress == null)
        {
            apiAddress = Configuration["ServerAddress"];
        }

        var response = await client.GetFromJsonAsync<IEnumerable<WeatherReport>>($"{apiAddress}/WeatherReports/Near?location={userGridsquare}&limit=1");
        report = response?.SingleOrDefault();
    }

    private async Task ManualLocation()
    {
        userMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(userGridsquare))
        {
            return;
        }

        userPosition = new Position();
        userPosition.DecodeMaidenhead(userGridsquare);

        await UpdateReports();
    }

    private async Task AutoLocation()
    {
        userMessage = string.Empty;

        GeolocationResult location = await locationService.GetCurrentPosition();

        if (!location.IsSuccess)
        {
            userMessage = "Unable to retrieve user location.";
            return;
        }

        userPosition = new Position();
        userPosition.Coordinates = new GeoCoordinatePortable.GeoCoordinate(location.Position.Coords.Latitude, location.Position.Coords.Longitude);
        userGridsquare = userPosition.EncodeGridsquare(6, false);

        await UpdateReports();
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateReports();
    }
}
