@page "/"
@using AprsSharp.Parsers.Aprs
@using AprsWeather.Shared
@using Microsoft.Extensions.Configuration
@using AprsWeatherClient.Extensions
@using System.Collections.Generic
@inject IConfiguration Configuration

<PageTitle>APRS Weather</PageTitle>

<h1>Current Washington State Weather</h1>

<div>
    <a>Gridsquare: </a>
    <input id="userGridsquareBox" placeholder="CN87to" @bind="userGridsquare"/>
    <button @onclick="UpdateReports">Get Weather!</button>
</div>

@if (userGridsquare == null)
{
    <p><em>Input location...</em></p>
}
else if (report == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Measurement</th>
                <th>Reading</th>
            </tr>
        </thead>
        <tbody>
            @if (report.Packet.InfoField is WeatherInfo wi)
            {
                <tr>
                    <td>Temp (F)</td>
                    <td>@wi.Temperature</td>
                </tr>

                <tr>
                    <td>Rain Today</td>
                    <td>@wi.RainfallSinceMidnight</td>
                </tr>

                <tr>
                    <td>Minutes Ago</td>
                    <td>@report.ReceivedTime.MinutesSince() minutes ago</td>
                </tr>

                <tr>
                    <td>Location</td>
                    <td>@($"{userPosition.MilesTo(wi.Position)} miles {userPosition.DirectionTo(wi.Position)}")</td>
                </tr>

                <tr>
                    <td>Reported By</td>
                    <td>@report.Packet.Sender</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherReport? report;
    private HttpClient client = new HttpClient();
    private string? apiAddress;
    private string? userGridsquare;
    private Position? userPosition;

    private async Task UpdateReports()
    {
        if (string.IsNullOrWhiteSpace(userGridsquare))
        {
            return;
        }

        if (apiAddress == null)
        {
            apiAddress = Configuration["ServerAddress"];
        }

        userPosition = new Position();
        userPosition.DecodeMaidenhead(userGridsquare);
        var response = await client.GetFromJsonAsync<IEnumerable<WeatherReport>>($"{apiAddress}/WeatherReports/Near?location={userGridsquare}&limit=1");
        report = response?.SingleOrDefault();
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateReports();
    }
}
