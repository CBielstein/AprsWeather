@page "/"
@using AprsSharp.Parsers.Aprs
@using AprsWeather.Shared
@using Microsoft.Extensions.Configuration
@using AprsWeatherClient.Extensions
@using System.Collections.Generic
@inject IConfiguration Configuration

<PageTitle>APRS Weather</PageTitle>

<h1>Current Seattle Weather</h1>

<div>
    <a>Gridsquare: </a>
    <input id="userGridsquareBox" placeholder="CN87to" @bind="userGridsquare"/>
    <button @onclick="UpdateReports">Get Weather!</button>
</div>

@if (userGridsquare == null)
{
    <p><em>Input location...</em></p>
}
else if (reports?.Any() != true)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Measurement</th>
                <th>Reading</th>
            </tr>
        </thead>
        <tbody>
            @if (reports.First().Packet.InfoField is WeatherInfo wi)
            {
                <tr>
                    <td>Temp (F)</td>
                    <td>@wi.Temperature</td>
                </tr>

                <tr>
                    <td>Rain Today</td>
                    <td>@wi.RainfallSinceMidnight</td>
                </tr>

                <tr>
                    <td>Minutes Ago</td>
                    <td>@reports.First().ReceivedTime.MinutesSince() minutes ago</td>
                </tr>

                <tr>
                    <td>Location</td>
                    <td>@ReportLocation(wi.Position)</td>
                </tr>

                <tr>
                    <td>Reported By</td>
                    <td>@reports.First().Packet.Sender</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WeatherReport>? reports;
    private HttpClient client = new HttpClient();
    private string? apiAddress;
    private string? userGridsquare;
    private Position? userPosition;
    private static SortedDictionary<double, string> directionDictionary = new SortedDictionary<double, string>()
        {
            { 11.25, "N" },
            { 33.75, "NNE" },
            { 56.25, "NE" },
            { 78.75, "ENE" },
            { 101.25, "E" },
            { 123.75, "ESE" },
            { 146.25, "SE" },
            { 168.75, "SSE" },
            { 191.25, "S" },
            { 213.75, "SSW" },
            { 236.25, "SW" },
            { 258.75, "WSW" },
            { 281.25, "W" },
            { 303.75, "WNW" },
            { 326.25, "NW" },
            { 348.75, "NNW" },
            { 360, "N" },
        };

    private async Task UpdateReports()
    {
        if (string.IsNullOrWhiteSpace(userGridsquare))
        {
            return;
        }

        if (apiAddress == null)
        {
            apiAddress = Configuration["ServerAddress"];
        }

        userPosition = new Position();
        userPosition.DecodeMaidenhead(userGridsquare);
        var received = await client.GetFromJsonAsync<IEnumerable<WeatherReport>>($"{apiAddress}/WeatherReports/Near?location={userGridsquare}&limit=1");

        // Order by Gridsquare
        reports = received?.OrderBy(r => (r.Packet.InfoField as WeatherInfo)?.Position.EncodeGridsquare(6, false));
    }

    /// <summary>
    /// Creates the string showing the distance and direction to a report for the UI to display
    /// </summary>
    /// <param name="reportPosition"><see cref="Position"/> of the report</param>
    /// <returns>String ready for display in the UI</returns>
    private string ReportLocation(Position reportPosition)
    {
        if (userPosition == null)
        {
            return string.Empty;
        }

        var distance = Math.Round((reportPosition.Coordinates.GetDistanceTo(userPosition.Coordinates) / 1000.0), 2);
        var direction = Math.Atan2(
            reportPosition.Coordinates.Latitude - userPosition.Coordinates.Latitude,
            reportPosition.Coordinates.Longitude - userPosition.Coordinates.Longitude);

        // ensure direction is positive
        direction = (direction + 360.0) % 360.0;

        string directionSymbol = directionDictionary.First(entry => direction < entry.Key).Value;

        return $"{distance} km {directionSymbol}";
    }
}
