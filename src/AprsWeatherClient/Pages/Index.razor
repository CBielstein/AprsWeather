@page "/"
@using AprsSharp.Parsers.Aprs
@using AprsWeather.Shared
@using Microsoft.Extensions.Configuration
@using AprsWeatherClient.Extensions
@inject IConfiguration Configuration

<PageTitle>APRS Weather</PageTitle>

<h1>Current Seattle Weather</h1>

<div>
    <a>Gridsquare: </a>
    <input id="userGridsquareBox" placeholder="CN87to88" @bind="userGridsquare"/>
    <button @onclick="UpdateReports">Get Weather!</button>
</div>

@if (userGridsquare == null)
{
    <p><em>Input location...</em></p>
}
else if (reports?.Any() != true)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Measurement</th>
                <th>Reading</th>
            </tr>
        </thead>
        <tbody>
            @if (reports.First().Packet.InfoField is WeatherInfo wi)
            {
                <tr>
                    <td>Temp (F)</td>
                    <td>@wi.Temperature</td>
                </tr>

                <tr>
                    <td>Rain Today</td>
                    <td>@wi.RainfallSinceMidnight</td>
                </tr>

                <tr>
                    <td>Minutes Ago</td>
                    <td>@reports.First().ReceivedTime.MinutesSince() minutes ago</td>
                </tr>

                <tr>
                    <td>Distance (km)</td>
                    <td>@Math.Round((wi.Position.Coordinates.GetDistanceTo(userPosition.Coordinates) / 1000.0), 2)</td>
                </tr>

                <tr>
                    <td>Gridsquare</td>
                    <td>@wi.Position.EncodeGridsquare(8, false)</td>
                </tr>

                <tr>
                    <td>Reported By</td>
                    <td>@reports.First().Packet.Sender</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WeatherReport>? reports;
    private HttpClient client = new HttpClient();
    private string? apiAddress;
    private string? userGridsquare;
    private Position? userPosition;

    private async Task UpdateReports()
    {
        if (apiAddress == null)
        {
            apiAddress = Configuration["ServerAddress"];
        }

        userPosition = new Position();
        userPosition.DecodeMaidenhead(userGridsquare);
        var received = await client.GetFromJsonAsync<IEnumerable<WeatherReport>>($"{apiAddress}/WeatherReports/Near?location={userGridsquare}&limit=1");

        // Order by Gridsquare
        reports = received?.OrderBy(r => (r.Packet.InfoField as WeatherInfo)?.Position.EncodeGridsquare(6, false));
    }
}
