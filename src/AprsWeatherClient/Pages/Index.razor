@page "/"
@using AprsSharp.Parsers.Aprs
@using AprsWeather.Shared
@using Microsoft.Extensions.Configuration
@using AprsWeatherClient.Extensions
@inject IConfiguration Configuration

<PageTitle>APRS Weather</PageTitle>

<h1>Current Seattle Weather</h1>

@if (reports == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Callsign</th>
                <th>Location</th>
                <th>Time</th>
                <th>Temp. (F)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var report in reports)
            {
                if (report.Report.InfoField is WeatherInfo wi)
                {
                    <tr>
                        <td>@report.Report.Sender</td>
                        <td>@wi.Position.EncodeGridsquare(6, false)</td>
                        <td>@report.ReceivedTime.MinutesSince() minutes ago</td>
                        <td>@wi.Temperature</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WeatherReport<Packet>>? reports;
    private HttpClient client = new HttpClient();
    private string? apiAddress;

    private async Task UpdateReports()
    {
        if (apiAddress == null)
        {
            apiAddress = Configuration["ServerAddress"];
        }

        var response = await client.GetFromJsonAsync<WeatherReport<string>[]>($"{apiAddress}/WeatherReports");

        // Decode
        var decodedReports = response?.Select(r =>
            new WeatherReport<Packet>()
            {
                Report = new Packet(r.Report),
                ReceivedTime = r.ReceivedTime,
            });

        // Order by Gridsquare
        reports = decodedReports?.OrderBy(r => (r.Report.InfoField as WeatherInfo)?.Position.EncodeGridsquare(6, false));
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateReports();
    }
}
